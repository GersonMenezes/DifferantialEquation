// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/25/2023 19:22:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DifferentialEquation
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DifferentialEquation_vlg_sample_tst(
	a,
	clock,
	dx,
	start,
	u,
	x,
	y,
	sampler_tx
);
input [15:0] a;
input  clock;
input [15:0] dx;
input  start;
input [15:0] u;
input [15:0] x;
input [15:0] y;
output sampler_tx;

reg sample;
time current_time;
always @(a or clock or dx or start or u or x or y)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DifferentialEquation_vlg_check_tst (
	saida,
	testu,
	testx,
	testy,
	sampler_rx
);
input [15:0] saida;
input [15:0] testu;
input [15:0] testx;
input [15:0] testy;
input sampler_rx;

reg [15:0] saida_expected;
reg [15:0] testu_expected;
reg [15:0] testx_expected;
reg [15:0] testy_expected;

reg [15:0] saida_prev;
reg [15:0] testu_prev;
reg [15:0] testx_prev;
reg [15:0] testy_prev;

reg [15:0] saida_expected_prev;
reg [15:0] testu_expected_prev;
reg [15:0] testx_expected_prev;
reg [15:0] testy_expected_prev;

reg [15:0] last_saida_exp;
reg [15:0] last_testu_exp;
reg [15:0] last_testx_exp;
reg [15:0] last_testy_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	saida_prev = saida;
	testu_prev = testu;
	testx_prev = testx;
	testy_prev = testy;
end

// update expected /o prevs

always @(trigger)
begin
	saida_expected_prev = saida_expected;
	testu_expected_prev = testu_expected;
	testx_expected_prev = testx_expected;
	testy_expected_prev = testy_expected;
end


// expected testx[ 15 ]
initial
begin
	testx_expected[15] = 1'bX;
end 
// expected testx[ 14 ]
initial
begin
	testx_expected[14] = 1'bX;
end 
// expected testx[ 13 ]
initial
begin
	testx_expected[13] = 1'bX;
end 
// expected testx[ 12 ]
initial
begin
	testx_expected[12] = 1'bX;
end 
// expected testx[ 11 ]
initial
begin
	testx_expected[11] = 1'bX;
end 
// expected testx[ 10 ]
initial
begin
	testx_expected[10] = 1'bX;
end 
// expected testx[ 9 ]
initial
begin
	testx_expected[9] = 1'bX;
end 
// expected testx[ 8 ]
initial
begin
	testx_expected[8] = 1'bX;
end 
// expected testx[ 7 ]
initial
begin
	testx_expected[7] = 1'bX;
end 
// expected testx[ 6 ]
initial
begin
	testx_expected[6] = 1'bX;
end 
// expected testx[ 5 ]
initial
begin
	testx_expected[5] = 1'bX;
end 
// expected testx[ 4 ]
initial
begin
	testx_expected[4] = 1'bX;
end 
// expected testx[ 3 ]
initial
begin
	testx_expected[3] = 1'bX;
end 
// expected testx[ 2 ]
initial
begin
	testx_expected[2] = 1'bX;
end 
// expected testx[ 1 ]
initial
begin
	testx_expected[1] = 1'bX;
end 
// expected testx[ 0 ]
initial
begin
	testx_expected[0] = 1'bX;
end 
// expected testu[ 15 ]
initial
begin
	testu_expected[15] = 1'bX;
end 
// expected testu[ 14 ]
initial
begin
	testu_expected[14] = 1'bX;
end 
// expected testu[ 13 ]
initial
begin
	testu_expected[13] = 1'bX;
end 
// expected testu[ 12 ]
initial
begin
	testu_expected[12] = 1'bX;
end 
// expected testu[ 11 ]
initial
begin
	testu_expected[11] = 1'bX;
end 
// expected testu[ 10 ]
initial
begin
	testu_expected[10] = 1'bX;
end 
// expected testu[ 9 ]
initial
begin
	testu_expected[9] = 1'bX;
end 
// expected testu[ 8 ]
initial
begin
	testu_expected[8] = 1'bX;
end 
// expected testu[ 7 ]
initial
begin
	testu_expected[7] = 1'bX;
end 
// expected testu[ 6 ]
initial
begin
	testu_expected[6] = 1'bX;
end 
// expected testu[ 5 ]
initial
begin
	testu_expected[5] = 1'bX;
end 
// expected testu[ 4 ]
initial
begin
	testu_expected[4] = 1'bX;
end 
// expected testu[ 3 ]
initial
begin
	testu_expected[3] = 1'bX;
end 
// expected testu[ 2 ]
initial
begin
	testu_expected[2] = 1'bX;
end 
// expected testu[ 1 ]
initial
begin
	testu_expected[1] = 1'bX;
end 
// expected testu[ 0 ]
initial
begin
	testu_expected[0] = 1'bX;
end 
// expected testy[ 15 ]
initial
begin
	testy_expected[15] = 1'bX;
end 
// expected testy[ 14 ]
initial
begin
	testy_expected[14] = 1'bX;
end 
// expected testy[ 13 ]
initial
begin
	testy_expected[13] = 1'bX;
end 
// expected testy[ 12 ]
initial
begin
	testy_expected[12] = 1'bX;
end 
// expected testy[ 11 ]
initial
begin
	testy_expected[11] = 1'bX;
end 
// expected testy[ 10 ]
initial
begin
	testy_expected[10] = 1'bX;
end 
// expected testy[ 9 ]
initial
begin
	testy_expected[9] = 1'bX;
end 
// expected testy[ 8 ]
initial
begin
	testy_expected[8] = 1'bX;
end 
// expected testy[ 7 ]
initial
begin
	testy_expected[7] = 1'bX;
end 
// expected testy[ 6 ]
initial
begin
	testy_expected[6] = 1'bX;
end 
// expected testy[ 5 ]
initial
begin
	testy_expected[5] = 1'bX;
end 
// expected testy[ 4 ]
initial
begin
	testy_expected[4] = 1'bX;
end 
// expected testy[ 3 ]
initial
begin
	testy_expected[3] = 1'bX;
end 
// expected testy[ 2 ]
initial
begin
	testy_expected[2] = 1'bX;
end 
// expected testy[ 1 ]
initial
begin
	testy_expected[1] = 1'bX;
end 
// expected testy[ 0 ]
initial
begin
	testy_expected[0] = 1'bX;
end 
// expected saida[ 15 ]
initial
begin
	saida_expected[15] = 1'bX;
end 
// expected saida[ 14 ]
initial
begin
	saida_expected[14] = 1'bX;
end 
// expected saida[ 13 ]
initial
begin
	saida_expected[13] = 1'bX;
end 
// expected saida[ 12 ]
initial
begin
	saida_expected[12] = 1'bX;
end 
// expected saida[ 11 ]
initial
begin
	saida_expected[11] = 1'bX;
end 
// expected saida[ 10 ]
initial
begin
	saida_expected[10] = 1'bX;
end 
// expected saida[ 9 ]
initial
begin
	saida_expected[9] = 1'bX;
end 
// expected saida[ 8 ]
initial
begin
	saida_expected[8] = 1'bX;
end 
// expected saida[ 7 ]
initial
begin
	saida_expected[7] = 1'bX;
end 
// expected saida[ 6 ]
initial
begin
	saida_expected[6] = 1'bX;
end 
// expected saida[ 5 ]
initial
begin
	saida_expected[5] = 1'bX;
end 
// expected saida[ 4 ]
initial
begin
	saida_expected[4] = 1'bX;
end 
// expected saida[ 3 ]
initial
begin
	saida_expected[3] = 1'bX;
end 
// expected saida[ 2 ]
initial
begin
	saida_expected[2] = 1'bX;
end 
// expected saida[ 1 ]
initial
begin
	saida_expected[1] = 1'bX;
end 
// expected saida[ 0 ]
initial
begin
	saida_expected[0] = 1'bX;
end 
// generate trigger
always @(saida_expected or saida or testu_expected or testu or testx_expected or testx or testy_expected or testy)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected saida = %b | expected testu = %b | expected testx = %b | expected testy = %b | ",saida_expected_prev,testu_expected_prev,testx_expected_prev,testy_expected_prev);
	$display("| real saida = %b | real testu = %b | real testx = %b | real testy = %b | ",saida_prev,testu_prev,testx_prev,testy_prev);
`endif
	if (
		( saida_expected_prev[0] !== 1'bx ) && ( saida_prev[0] !== saida_expected_prev[0] )
		&& ((saida_expected_prev[0] !== last_saida_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida_exp[0] = saida_expected_prev[0];
	end
	if (
		( saida_expected_prev[1] !== 1'bx ) && ( saida_prev[1] !== saida_expected_prev[1] )
		&& ((saida_expected_prev[1] !== last_saida_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida_exp[1] = saida_expected_prev[1];
	end
	if (
		( saida_expected_prev[2] !== 1'bx ) && ( saida_prev[2] !== saida_expected_prev[2] )
		&& ((saida_expected_prev[2] !== last_saida_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida_exp[2] = saida_expected_prev[2];
	end
	if (
		( saida_expected_prev[3] !== 1'bx ) && ( saida_prev[3] !== saida_expected_prev[3] )
		&& ((saida_expected_prev[3] !== last_saida_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida_exp[3] = saida_expected_prev[3];
	end
	if (
		( saida_expected_prev[4] !== 1'bx ) && ( saida_prev[4] !== saida_expected_prev[4] )
		&& ((saida_expected_prev[4] !== last_saida_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida_exp[4] = saida_expected_prev[4];
	end
	if (
		( saida_expected_prev[5] !== 1'bx ) && ( saida_prev[5] !== saida_expected_prev[5] )
		&& ((saida_expected_prev[5] !== last_saida_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida_exp[5] = saida_expected_prev[5];
	end
	if (
		( saida_expected_prev[6] !== 1'bx ) && ( saida_prev[6] !== saida_expected_prev[6] )
		&& ((saida_expected_prev[6] !== last_saida_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida_exp[6] = saida_expected_prev[6];
	end
	if (
		( saida_expected_prev[7] !== 1'bx ) && ( saida_prev[7] !== saida_expected_prev[7] )
		&& ((saida_expected_prev[7] !== last_saida_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida_exp[7] = saida_expected_prev[7];
	end
	if (
		( saida_expected_prev[8] !== 1'bx ) && ( saida_prev[8] !== saida_expected_prev[8] )
		&& ((saida_expected_prev[8] !== last_saida_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida_exp[8] = saida_expected_prev[8];
	end
	if (
		( saida_expected_prev[9] !== 1'bx ) && ( saida_prev[9] !== saida_expected_prev[9] )
		&& ((saida_expected_prev[9] !== last_saida_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida_exp[9] = saida_expected_prev[9];
	end
	if (
		( saida_expected_prev[10] !== 1'bx ) && ( saida_prev[10] !== saida_expected_prev[10] )
		&& ((saida_expected_prev[10] !== last_saida_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida_exp[10] = saida_expected_prev[10];
	end
	if (
		( saida_expected_prev[11] !== 1'bx ) && ( saida_prev[11] !== saida_expected_prev[11] )
		&& ((saida_expected_prev[11] !== last_saida_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida_exp[11] = saida_expected_prev[11];
	end
	if (
		( saida_expected_prev[12] !== 1'bx ) && ( saida_prev[12] !== saida_expected_prev[12] )
		&& ((saida_expected_prev[12] !== last_saida_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida_exp[12] = saida_expected_prev[12];
	end
	if (
		( saida_expected_prev[13] !== 1'bx ) && ( saida_prev[13] !== saida_expected_prev[13] )
		&& ((saida_expected_prev[13] !== last_saida_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida_exp[13] = saida_expected_prev[13];
	end
	if (
		( saida_expected_prev[14] !== 1'bx ) && ( saida_prev[14] !== saida_expected_prev[14] )
		&& ((saida_expected_prev[14] !== last_saida_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida_exp[14] = saida_expected_prev[14];
	end
	if (
		( saida_expected_prev[15] !== 1'bx ) && ( saida_prev[15] !== saida_expected_prev[15] )
		&& ((saida_expected_prev[15] !== last_saida_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida_exp[15] = saida_expected_prev[15];
	end
	if (
		( testu_expected_prev[0] !== 1'bx ) && ( testu_prev[0] !== testu_expected_prev[0] )
		&& ((testu_expected_prev[0] !== last_testu_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testu_expected_prev);
		$display ("     Real value = %b", testu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testu_exp[0] = testu_expected_prev[0];
	end
	if (
		( testu_expected_prev[1] !== 1'bx ) && ( testu_prev[1] !== testu_expected_prev[1] )
		&& ((testu_expected_prev[1] !== last_testu_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testu_expected_prev);
		$display ("     Real value = %b", testu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testu_exp[1] = testu_expected_prev[1];
	end
	if (
		( testu_expected_prev[2] !== 1'bx ) && ( testu_prev[2] !== testu_expected_prev[2] )
		&& ((testu_expected_prev[2] !== last_testu_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testu_expected_prev);
		$display ("     Real value = %b", testu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testu_exp[2] = testu_expected_prev[2];
	end
	if (
		( testu_expected_prev[3] !== 1'bx ) && ( testu_prev[3] !== testu_expected_prev[3] )
		&& ((testu_expected_prev[3] !== last_testu_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testu_expected_prev);
		$display ("     Real value = %b", testu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testu_exp[3] = testu_expected_prev[3];
	end
	if (
		( testu_expected_prev[4] !== 1'bx ) && ( testu_prev[4] !== testu_expected_prev[4] )
		&& ((testu_expected_prev[4] !== last_testu_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testu[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testu_expected_prev);
		$display ("     Real value = %b", testu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testu_exp[4] = testu_expected_prev[4];
	end
	if (
		( testu_expected_prev[5] !== 1'bx ) && ( testu_prev[5] !== testu_expected_prev[5] )
		&& ((testu_expected_prev[5] !== last_testu_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testu[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testu_expected_prev);
		$display ("     Real value = %b", testu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testu_exp[5] = testu_expected_prev[5];
	end
	if (
		( testu_expected_prev[6] !== 1'bx ) && ( testu_prev[6] !== testu_expected_prev[6] )
		&& ((testu_expected_prev[6] !== last_testu_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testu[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testu_expected_prev);
		$display ("     Real value = %b", testu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testu_exp[6] = testu_expected_prev[6];
	end
	if (
		( testu_expected_prev[7] !== 1'bx ) && ( testu_prev[7] !== testu_expected_prev[7] )
		&& ((testu_expected_prev[7] !== last_testu_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testu[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testu_expected_prev);
		$display ("     Real value = %b", testu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testu_exp[7] = testu_expected_prev[7];
	end
	if (
		( testu_expected_prev[8] !== 1'bx ) && ( testu_prev[8] !== testu_expected_prev[8] )
		&& ((testu_expected_prev[8] !== last_testu_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testu[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testu_expected_prev);
		$display ("     Real value = %b", testu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testu_exp[8] = testu_expected_prev[8];
	end
	if (
		( testu_expected_prev[9] !== 1'bx ) && ( testu_prev[9] !== testu_expected_prev[9] )
		&& ((testu_expected_prev[9] !== last_testu_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testu[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testu_expected_prev);
		$display ("     Real value = %b", testu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testu_exp[9] = testu_expected_prev[9];
	end
	if (
		( testu_expected_prev[10] !== 1'bx ) && ( testu_prev[10] !== testu_expected_prev[10] )
		&& ((testu_expected_prev[10] !== last_testu_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testu[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testu_expected_prev);
		$display ("     Real value = %b", testu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testu_exp[10] = testu_expected_prev[10];
	end
	if (
		( testu_expected_prev[11] !== 1'bx ) && ( testu_prev[11] !== testu_expected_prev[11] )
		&& ((testu_expected_prev[11] !== last_testu_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testu[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testu_expected_prev);
		$display ("     Real value = %b", testu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testu_exp[11] = testu_expected_prev[11];
	end
	if (
		( testu_expected_prev[12] !== 1'bx ) && ( testu_prev[12] !== testu_expected_prev[12] )
		&& ((testu_expected_prev[12] !== last_testu_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testu[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testu_expected_prev);
		$display ("     Real value = %b", testu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testu_exp[12] = testu_expected_prev[12];
	end
	if (
		( testu_expected_prev[13] !== 1'bx ) && ( testu_prev[13] !== testu_expected_prev[13] )
		&& ((testu_expected_prev[13] !== last_testu_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testu[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testu_expected_prev);
		$display ("     Real value = %b", testu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testu_exp[13] = testu_expected_prev[13];
	end
	if (
		( testu_expected_prev[14] !== 1'bx ) && ( testu_prev[14] !== testu_expected_prev[14] )
		&& ((testu_expected_prev[14] !== last_testu_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testu[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testu_expected_prev);
		$display ("     Real value = %b", testu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testu_exp[14] = testu_expected_prev[14];
	end
	if (
		( testu_expected_prev[15] !== 1'bx ) && ( testu_prev[15] !== testu_expected_prev[15] )
		&& ((testu_expected_prev[15] !== last_testu_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testu[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testu_expected_prev);
		$display ("     Real value = %b", testu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testu_exp[15] = testu_expected_prev[15];
	end
	if (
		( testx_expected_prev[0] !== 1'bx ) && ( testx_prev[0] !== testx_expected_prev[0] )
		&& ((testx_expected_prev[0] !== last_testx_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testx[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testx_expected_prev);
		$display ("     Real value = %b", testx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testx_exp[0] = testx_expected_prev[0];
	end
	if (
		( testx_expected_prev[1] !== 1'bx ) && ( testx_prev[1] !== testx_expected_prev[1] )
		&& ((testx_expected_prev[1] !== last_testx_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testx[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testx_expected_prev);
		$display ("     Real value = %b", testx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testx_exp[1] = testx_expected_prev[1];
	end
	if (
		( testx_expected_prev[2] !== 1'bx ) && ( testx_prev[2] !== testx_expected_prev[2] )
		&& ((testx_expected_prev[2] !== last_testx_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testx[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testx_expected_prev);
		$display ("     Real value = %b", testx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testx_exp[2] = testx_expected_prev[2];
	end
	if (
		( testx_expected_prev[3] !== 1'bx ) && ( testx_prev[3] !== testx_expected_prev[3] )
		&& ((testx_expected_prev[3] !== last_testx_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testx[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testx_expected_prev);
		$display ("     Real value = %b", testx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testx_exp[3] = testx_expected_prev[3];
	end
	if (
		( testx_expected_prev[4] !== 1'bx ) && ( testx_prev[4] !== testx_expected_prev[4] )
		&& ((testx_expected_prev[4] !== last_testx_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testx[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testx_expected_prev);
		$display ("     Real value = %b", testx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testx_exp[4] = testx_expected_prev[4];
	end
	if (
		( testx_expected_prev[5] !== 1'bx ) && ( testx_prev[5] !== testx_expected_prev[5] )
		&& ((testx_expected_prev[5] !== last_testx_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testx[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testx_expected_prev);
		$display ("     Real value = %b", testx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testx_exp[5] = testx_expected_prev[5];
	end
	if (
		( testx_expected_prev[6] !== 1'bx ) && ( testx_prev[6] !== testx_expected_prev[6] )
		&& ((testx_expected_prev[6] !== last_testx_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testx[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testx_expected_prev);
		$display ("     Real value = %b", testx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testx_exp[6] = testx_expected_prev[6];
	end
	if (
		( testx_expected_prev[7] !== 1'bx ) && ( testx_prev[7] !== testx_expected_prev[7] )
		&& ((testx_expected_prev[7] !== last_testx_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testx[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testx_expected_prev);
		$display ("     Real value = %b", testx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testx_exp[7] = testx_expected_prev[7];
	end
	if (
		( testx_expected_prev[8] !== 1'bx ) && ( testx_prev[8] !== testx_expected_prev[8] )
		&& ((testx_expected_prev[8] !== last_testx_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testx[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testx_expected_prev);
		$display ("     Real value = %b", testx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testx_exp[8] = testx_expected_prev[8];
	end
	if (
		( testx_expected_prev[9] !== 1'bx ) && ( testx_prev[9] !== testx_expected_prev[9] )
		&& ((testx_expected_prev[9] !== last_testx_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testx[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testx_expected_prev);
		$display ("     Real value = %b", testx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testx_exp[9] = testx_expected_prev[9];
	end
	if (
		( testx_expected_prev[10] !== 1'bx ) && ( testx_prev[10] !== testx_expected_prev[10] )
		&& ((testx_expected_prev[10] !== last_testx_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testx[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testx_expected_prev);
		$display ("     Real value = %b", testx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testx_exp[10] = testx_expected_prev[10];
	end
	if (
		( testx_expected_prev[11] !== 1'bx ) && ( testx_prev[11] !== testx_expected_prev[11] )
		&& ((testx_expected_prev[11] !== last_testx_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testx[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testx_expected_prev);
		$display ("     Real value = %b", testx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testx_exp[11] = testx_expected_prev[11];
	end
	if (
		( testx_expected_prev[12] !== 1'bx ) && ( testx_prev[12] !== testx_expected_prev[12] )
		&& ((testx_expected_prev[12] !== last_testx_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testx[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testx_expected_prev);
		$display ("     Real value = %b", testx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testx_exp[12] = testx_expected_prev[12];
	end
	if (
		( testx_expected_prev[13] !== 1'bx ) && ( testx_prev[13] !== testx_expected_prev[13] )
		&& ((testx_expected_prev[13] !== last_testx_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testx[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testx_expected_prev);
		$display ("     Real value = %b", testx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testx_exp[13] = testx_expected_prev[13];
	end
	if (
		( testx_expected_prev[14] !== 1'bx ) && ( testx_prev[14] !== testx_expected_prev[14] )
		&& ((testx_expected_prev[14] !== last_testx_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testx[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testx_expected_prev);
		$display ("     Real value = %b", testx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testx_exp[14] = testx_expected_prev[14];
	end
	if (
		( testx_expected_prev[15] !== 1'bx ) && ( testx_prev[15] !== testx_expected_prev[15] )
		&& ((testx_expected_prev[15] !== last_testx_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testx[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testx_expected_prev);
		$display ("     Real value = %b", testx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testx_exp[15] = testx_expected_prev[15];
	end
	if (
		( testy_expected_prev[0] !== 1'bx ) && ( testy_prev[0] !== testy_expected_prev[0] )
		&& ((testy_expected_prev[0] !== last_testy_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testy[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testy_expected_prev);
		$display ("     Real value = %b", testy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testy_exp[0] = testy_expected_prev[0];
	end
	if (
		( testy_expected_prev[1] !== 1'bx ) && ( testy_prev[1] !== testy_expected_prev[1] )
		&& ((testy_expected_prev[1] !== last_testy_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testy[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testy_expected_prev);
		$display ("     Real value = %b", testy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testy_exp[1] = testy_expected_prev[1];
	end
	if (
		( testy_expected_prev[2] !== 1'bx ) && ( testy_prev[2] !== testy_expected_prev[2] )
		&& ((testy_expected_prev[2] !== last_testy_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testy[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testy_expected_prev);
		$display ("     Real value = %b", testy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testy_exp[2] = testy_expected_prev[2];
	end
	if (
		( testy_expected_prev[3] !== 1'bx ) && ( testy_prev[3] !== testy_expected_prev[3] )
		&& ((testy_expected_prev[3] !== last_testy_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testy[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testy_expected_prev);
		$display ("     Real value = %b", testy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testy_exp[3] = testy_expected_prev[3];
	end
	if (
		( testy_expected_prev[4] !== 1'bx ) && ( testy_prev[4] !== testy_expected_prev[4] )
		&& ((testy_expected_prev[4] !== last_testy_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testy[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testy_expected_prev);
		$display ("     Real value = %b", testy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testy_exp[4] = testy_expected_prev[4];
	end
	if (
		( testy_expected_prev[5] !== 1'bx ) && ( testy_prev[5] !== testy_expected_prev[5] )
		&& ((testy_expected_prev[5] !== last_testy_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testy[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testy_expected_prev);
		$display ("     Real value = %b", testy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testy_exp[5] = testy_expected_prev[5];
	end
	if (
		( testy_expected_prev[6] !== 1'bx ) && ( testy_prev[6] !== testy_expected_prev[6] )
		&& ((testy_expected_prev[6] !== last_testy_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testy[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testy_expected_prev);
		$display ("     Real value = %b", testy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testy_exp[6] = testy_expected_prev[6];
	end
	if (
		( testy_expected_prev[7] !== 1'bx ) && ( testy_prev[7] !== testy_expected_prev[7] )
		&& ((testy_expected_prev[7] !== last_testy_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testy[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testy_expected_prev);
		$display ("     Real value = %b", testy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testy_exp[7] = testy_expected_prev[7];
	end
	if (
		( testy_expected_prev[8] !== 1'bx ) && ( testy_prev[8] !== testy_expected_prev[8] )
		&& ((testy_expected_prev[8] !== last_testy_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testy[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testy_expected_prev);
		$display ("     Real value = %b", testy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testy_exp[8] = testy_expected_prev[8];
	end
	if (
		( testy_expected_prev[9] !== 1'bx ) && ( testy_prev[9] !== testy_expected_prev[9] )
		&& ((testy_expected_prev[9] !== last_testy_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testy[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testy_expected_prev);
		$display ("     Real value = %b", testy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testy_exp[9] = testy_expected_prev[9];
	end
	if (
		( testy_expected_prev[10] !== 1'bx ) && ( testy_prev[10] !== testy_expected_prev[10] )
		&& ((testy_expected_prev[10] !== last_testy_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testy[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testy_expected_prev);
		$display ("     Real value = %b", testy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testy_exp[10] = testy_expected_prev[10];
	end
	if (
		( testy_expected_prev[11] !== 1'bx ) && ( testy_prev[11] !== testy_expected_prev[11] )
		&& ((testy_expected_prev[11] !== last_testy_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testy[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testy_expected_prev);
		$display ("     Real value = %b", testy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testy_exp[11] = testy_expected_prev[11];
	end
	if (
		( testy_expected_prev[12] !== 1'bx ) && ( testy_prev[12] !== testy_expected_prev[12] )
		&& ((testy_expected_prev[12] !== last_testy_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testy[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testy_expected_prev);
		$display ("     Real value = %b", testy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testy_exp[12] = testy_expected_prev[12];
	end
	if (
		( testy_expected_prev[13] !== 1'bx ) && ( testy_prev[13] !== testy_expected_prev[13] )
		&& ((testy_expected_prev[13] !== last_testy_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testy[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testy_expected_prev);
		$display ("     Real value = %b", testy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testy_exp[13] = testy_expected_prev[13];
	end
	if (
		( testy_expected_prev[14] !== 1'bx ) && ( testy_prev[14] !== testy_expected_prev[14] )
		&& ((testy_expected_prev[14] !== last_testy_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testy[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testy_expected_prev);
		$display ("     Real value = %b", testy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testy_exp[14] = testy_expected_prev[14];
	end
	if (
		( testy_expected_prev[15] !== 1'bx ) && ( testy_prev[15] !== testy_expected_prev[15] )
		&& ((testy_expected_prev[15] !== last_testy_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testy[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testy_expected_prev);
		$display ("     Real value = %b", testy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testy_exp[15] = testy_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DifferentialEquation_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] a;
reg clock;
reg [15:0] dx;
reg start;
reg [15:0] u;
reg [15:0] x;
reg [15:0] y;
// wires                                               
wire [15:0] saida;
wire [15:0] testu;
wire [15:0] testx;
wire [15:0] testy;

wire sampler;                             

// assign statements (if any)                          
DifferentialEquation i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.clock(clock),
	.dx(dx),
	.saida(saida),
	.start(start),
	.testu(testu),
	.testx(testx),
	.testy(testy),
	.u(u),
	.x(x),
	.y(y)
);

// clock
always
begin
	clock = 1'b0;
	clock = #20000 1'b1;
	#20000;
end 
// a[ 15 ]
initial
begin
	a[15] = 1'b0;
end 
// a[ 14 ]
initial
begin
	a[14] = 1'b0;
end 
// a[ 13 ]
initial
begin
	a[13] = 1'b1;
end 
// a[ 12 ]
initial
begin
	a[12] = 1'b0;
end 
// a[ 11 ]
initial
begin
	a[11] = 1'b0;
end 
// a[ 10 ]
initial
begin
	a[10] = 1'b0;
end 
// a[ 9 ]
initial
begin
	a[9] = 1'b0;
end 
// a[ 8 ]
initial
begin
	a[8] = 1'b0;
end 
// a[ 7 ]
initial
begin
	a[7] = 1'b1;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b0;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b0;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b1;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b1;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b1;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
end 
// dx[ 15 ]
initial
begin
	dx[15] = 1'b0;
end 
// dx[ 14 ]
initial
begin
	dx[14] = 1'b0;
end 
// dx[ 13 ]
initial
begin
	dx[13] = 1'b0;
end 
// dx[ 12 ]
initial
begin
	dx[12] = 1'b0;
end 
// dx[ 11 ]
initial
begin
	dx[11] = 1'b0;
end 
// dx[ 10 ]
initial
begin
	dx[10] = 1'b0;
end 
// dx[ 9 ]
initial
begin
	dx[9] = 1'b0;
end 
// dx[ 8 ]
initial
begin
	dx[8] = 1'b1;
end 
// dx[ 7 ]
initial
begin
	dx[7] = 1'b0;
end 
// dx[ 6 ]
initial
begin
	dx[6] = 1'b0;
end 
// dx[ 5 ]
initial
begin
	dx[5] = 1'b0;
end 
// dx[ 4 ]
initial
begin
	dx[4] = 1'b0;
end 
// dx[ 3 ]
initial
begin
	dx[3] = 1'b0;
end 
// dx[ 2 ]
initial
begin
	dx[2] = 1'b0;
end 
// dx[ 1 ]
initial
begin
	dx[1] = 1'b1;
end 
// dx[ 0 ]
initial
begin
	dx[0] = 1'b0;
end 
// u[ 15 ]
initial
begin
	u[15] = 1'b0;
end 
// u[ 14 ]
initial
begin
	u[14] = 1'b0;
end 
// u[ 13 ]
initial
begin
	u[13] = 1'b0;
end 
// u[ 12 ]
initial
begin
	u[12] = 1'b0;
end 
// u[ 11 ]
initial
begin
	u[11] = 1'b0;
end 
// u[ 10 ]
initial
begin
	u[10] = 1'b0;
end 
// u[ 9 ]
initial
begin
	u[9] = 1'b0;
end 
// u[ 8 ]
initial
begin
	u[8] = 1'b1;
end 
// u[ 7 ]
initial
begin
	u[7] = 1'b0;
end 
// u[ 6 ]
initial
begin
	u[6] = 1'b0;
end 
// u[ 5 ]
initial
begin
	u[5] = 1'b0;
end 
// u[ 4 ]
initial
begin
	u[4] = 1'b0;
end 
// u[ 3 ]
initial
begin
	u[3] = 1'b1;
end 
// u[ 2 ]
initial
begin
	u[2] = 1'b1;
end 
// u[ 1 ]
initial
begin
	u[1] = 1'b1;
end 
// u[ 0 ]
initial
begin
	u[0] = 1'b1;
end 
// x[ 15 ]
initial
begin
	x[15] = 1'b0;
end 
// x[ 14 ]
initial
begin
	x[14] = 1'b0;
end 
// x[ 13 ]
initial
begin
	x[13] = 1'b0;
end 
// x[ 12 ]
initial
begin
	x[12] = 1'b0;
end 
// x[ 11 ]
initial
begin
	x[11] = 1'b0;
end 
// x[ 10 ]
initial
begin
	x[10] = 1'b0;
end 
// x[ 9 ]
initial
begin
	x[9] = 1'b0;
end 
// x[ 8 ]
initial
begin
	x[8] = 1'b1;
end 
// x[ 7 ]
initial
begin
	x[7] = 1'b0;
end 
// x[ 6 ]
initial
begin
	x[6] = 1'b1;
end 
// x[ 5 ]
initial
begin
	x[5] = 1'b0;
end 
// x[ 4 ]
initial
begin
	x[4] = 1'b0;
end 
// x[ 3 ]
initial
begin
	x[3] = 1'b0;
end 
// x[ 2 ]
initial
begin
	x[2] = 1'b1;
end 
// x[ 1 ]
initial
begin
	x[1] = 1'b0;
end 
// x[ 0 ]
initial
begin
	x[0] = 1'b0;
end 
// y[ 15 ]
initial
begin
	y[15] = 1'b0;
end 
// y[ 14 ]
initial
begin
	y[14] = 1'b0;
end 
// y[ 13 ]
initial
begin
	y[13] = 1'b0;
end 
// y[ 12 ]
initial
begin
	y[12] = 1'b0;
end 
// y[ 11 ]
initial
begin
	y[11] = 1'b0;
end 
// y[ 10 ]
initial
begin
	y[10] = 1'b0;
end 
// y[ 9 ]
initial
begin
	y[9] = 1'b0;
end 
// y[ 8 ]
initial
begin
	y[8] = 1'b1;
end 
// y[ 7 ]
initial
begin
	y[7] = 1'b0;
end 
// y[ 6 ]
initial
begin
	y[6] = 1'b0;
end 
// y[ 5 ]
initial
begin
	y[5] = 1'b0;
end 
// y[ 4 ]
initial
begin
	y[4] = 1'b0;
end 
// y[ 3 ]
initial
begin
	y[3] = 1'b0;
end 
// y[ 2 ]
initial
begin
	y[2] = 1'b1;
end 
// y[ 1 ]
initial
begin
	y[1] = 1'b0;
end 
// y[ 0 ]
initial
begin
	y[0] = 1'b1;
end 

DifferentialEquation_vlg_sample_tst tb_sample (
	.a(a),
	.clock(clock),
	.dx(dx),
	.start(start),
	.u(u),
	.x(x),
	.y(y),
	.sampler_tx(sampler)
);

DifferentialEquation_vlg_check_tst tb_out(
	.saida(saida),
	.testu(testu),
	.testx(testx),
	.testy(testy),
	.sampler_rx(sampler)
);
endmodule

